// const [relatedPosts, setRelatedPosts] = useState([]);

// useEffect(() => {
//   if(slug) {
//     getSimilarPosts(categories, slug)
//     .then((result) => setRelatedPosts(result))
//   }else{
//     getRecentPosts()
//     .then((result) => setRelatedPosts(result))
//   }
// }, [slug])


// export async function getStaticPaths() {
//   const posts = await getPosts();

//   return{
//     paths: posts.map(({node: {slug}}) => ({params: {slug}})),
//     fallback:false,

//   }
// }


//  slug={post.slug} categories={post.categories.map((category)=> category.slug)}

// import { graphql } from "graphql";
// import { request, gql } from "graphql-request";


// const graphqlAPI = process.env.NEXT_PUBLIC_GRAPHCMS_ENDPOINT;

// export const getPosts = async () => {
  
//     const query = gql`
//     query MyQuery {
//         postsConnection {
//           edges {
//             node {
//               author {
//                 bio
//                 id
//                 name
//                 photo {
//                   url
//                 }
//               }
//               createdAt
//               slug
//               title
//               excerpt
//               featuredImage {
//                 url
//               }
//               categories {
//                 name
//                 slug
//               }
//             }
//           }
//         }
//       }
      
//     `

//     const result =await request(graphqlAPI, query);

//     return result.postsConnection.edges;
// };


// export const getPostDetails = async (slug) => {
  
//   const query = gql`
//   query GetPostDetails($slug: String!) {
//     post(where: {slug: $slug}){
//             author {
//               bio
//               id
//               name
//               photo {
//                 url
//               }
//             }
//             createdAt
//             slug
//             title
//             excerpt
//             featuredImage {
//               url
//             }
//             categories {
//               name
//               slug
//              }
//              content{
//                raw
//              }
//       }
//     }
    
//   `

//   const result =await request(graphqlAPI, query, {slug});

//   return result.post;
// }



// export const getRecentPosts = async () => {
//   const query = gql `
//   query GetPostDetails() {
//     posts(
//       orderBy: createdAt_ASC
//       last:3
//     ) {
//       title
//       featuredImage{
//         url
//       }
//       createdAt
//       slug
//     }
//   }
//   `
//   const result =await request(graphqlAPI, query);

//   return result.posts;
// }

// export const getSimilarPosts = async (categories, slug)  => {
//   const query = gql `
//   query GetPostDetails($slug: String! , $categories: [String!]) {
//     posts(
//       where: { slug_not: $slug , AND: {categories_some: {slug_in: $categories}}}
//       last:3
//     )
//     {
//       title
//       featuredImage{
//         url
//       }
//       createdAt
//       slug
//     }
//   }
 
//   `
//   const result =await request(graphqlAPI, query , {categories, slug});

//   return result.posts;
// }


// export const getCategories = async ()  => {
//   const query = gql `
//   query GetCategories {
//     categories {
//       name
//       slug
//     }
//   }`

//   const result =await request(graphqlAPI, query);

//   return result.categories;
// }


// export const submitComment = async (obj) => {
//   const result = await fetch('/api/comments', {
//     method: 'POST',
//     headers: {
//       'Content-Type': 'application/json',
//     },
//     body: JSON.stringify(obj),
//   });

//   return result.json();
// };

// export const getComments = async (slug) => {
//   const query = gql`
//     query GetComments($slug:String!) {
//       comments(where: {post: {slug:$slug}}){
//         name
//         createdAt
//         comment
//       }
//     }
//   `;

//   const result = await request(graphqlAPI, query, { slug });

//   return result.comments;
// };


import { GraphQLClient, gql } from 'graphql-request';

const graphqlAPI = process.env.NEXT_PUBLIC_GRAPHCMS_ENDPOINT;
const graphcmsToken = process.env.GRAPHCMS_TOKEN
/** *************************************************************
* Any file inside the folder pages/api is mapped to /api/* and  *
* will be treated as an API endpoint instead of a page.         *
*************************************************************** */

// export a default function for API route to work
export default async function asynchandler(req, res) {

    console.log({graphcmsToken});
  const graphQLClient = new GraphQLClient((graphqlAPI), {
    headers: {
      authorization: `Bearer ${graphcmsToken}`,
    },
  });

  const query = gql`
    mutation CreateComment($name: String!, $email: String!, $comment: String!, $slug: String!) {
      createComment(data: {name: $name, email: $email, comment: $comment, post: {connect: {slug: $slug}}}) { id }
    }
  `;

  try {
      
  const result = await graphQLClient.request(query, {
    name: req.body.name,
    email: req.body.email,
    comment: req.body.comment,
    slug: req.body.slug,

    
  })
  
  return res.status(200).send(result);
}
 catch (error) {
      console.log(error)
      return res.status(500).send(error);
  }
}
 